#pragma checksum "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\Lecture\Материнская_плата.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f9a7a2e7f8668b1ef27238106a7f522b7c4a97ff"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Lecture_Материнская_плата), @"mvc.1.0.view", @"/Views/Lecture/Материнская_плата.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\_ViewImports.cshtml"
using networkApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\_ViewImports.cshtml"
using networkApp.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\_ViewImports.cshtml"
using networkApp.ViewModels.TestConstructor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\_ViewImports.cshtml"
using networkApp.ViewModels.TestResult;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f9a7a2e7f8668b1ef27238106a7f522b7c4a97ff", @"/Views/Lecture/Материнская_плата.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a7316a8470aab35e9f06cffd6510345aa656d9ce", @"/Views/_ViewImports.cshtml")]
    public class Views_Lecture_Материнская_плата : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/image/motherbord/main.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("central-image"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/image/motherbord/shema.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\gensec\Documents\GitHub\networkApp\networkApp\Views\Lecture\Материнская_плата.cshtml"
  
    ViewBag.Title = "Материнская плата";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Материнская плата</h1>

<p class=""main-text"">Cистемная плата (в просторечии: ""материнская плата"", ""материнка"", ""мать"") — печатная плата, являющаяся основой построения модульного устройства, например — компьютера.</p>
<p class=""main-text"">Системная плата содержит основную часть устройства, дополнительные же или взаимозаменяемые платы называются платами расширений.</p>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9a7a2e7f8668b1ef27238106a7f522b7c4a97ff5239", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<p class=""main-text"">До изобретения микропроцессора цифровой компьютер состоял из нескольких печатных плат в корпусе картотеки с компонентами, соединенными объединительной платой, набором соединенных между собой разъемов. В очень старых разработках медные провода соединяли контакты разъема карты, но вскоре стандартной практикой стало использование печатных плат. Центральный процессор (ЦП), память и периферийные устройства были размещены на отдельных печатных платах, которые были подключены к задней панели. Широко распространенная шина S-100 1970-х годов является примером такого типа систем объединительной платы.</p>
<p class=""main-text"">Самые популярные компьютеры 1980-х годов, такие как Apple II и IBM PC, публиковали принципиальные схемы и другую документацию, которая позволяла производить быструю обратную разработку и замену материнских плат сторонних производителей. Обычно предназначенные для создания новых компьютеров, совместимых с образцами, многие материнские платы предлагали дополнительную произв");
            WriteLiteral(@"одительность или другие функции и использовались для обновления оригинального оборудования производителя.<br /></p>
<p class=""main-text"">В конце 1980-х и начале 1990-х годов стало экономически целесообразным переносить все увеличивающееся количество периферийных функций на материнскую плату. В конце 1980-х годов материнские платы для персональных компьютеров стали включать одиночные ИС (также называемые микросхемами Super I/O), способные поддерживать набор низкоскоростных периферийных устройств: клавиатуры, мыши, дисковода гибких дисков, последовательных и параллельных портов. К концу 1990-х годов многие материнские платы для персональных компьютеров включали встроенные функции аудио, видео, хранения и сетевых функций потребительского уровня без необходимости использования каких-либо плат расширения; высококлассные системы для 3D-игр и компьютерной графики, за исключением видеокарты, обычно сохраняется на материнской плате. Корпоративным ПК, рабочим станциям и серверам, скорее всего, потребуются карты расшир");
            WriteLiteral(@"ения либо для более надежных функций, либо для более высоких скоростей.<br /></p>
<p class=""main-text"">Лэптопы и ноутбуки, разработанные в 1990-х годах, объединяли самые распространенные периферийные устройства. Они даже включали в себя материнские платы без обновляемых компонентов, и эта тенденция сохранится даже тогда, когда будут изобретены более мелкие устройства (например, планшеты и нетбуки).</p>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f9a7a2e7f8668b1ef27238106a7f522b7c4a97ff8879", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<p class=""main-text"" style=""text-indent: 0;"">Эволюция материнских плат IBM PC-совместимых компьютеров</p>

<ul class=""main-text__list"">
    <li>Первая модель IBM PC содержала на материнской плате минимум устройств: процессор, математический сопроцессор, ОЗУ, ПЗУ с BIOS, шину ISA, контроллер клавиатуры и служебную логику. Память была набрана отдельными микросхемами, вставленными в панели, а вся служебная логика была построена на микросхемах малой степени интеграции. Изменение конфигурации осуществлялось перемычками либо DIP-переключателями. Кроме слотов расширения ISA на плате имелись лишь разъёмы для подключения клавиатуры и магнитофона. Все прочие устройства (видеоадаптер, контроллер гибких и жёстких дисков, COM и LPT — портов) располагались на платах расширения;</li>
    <li>С появлением IBM PC/AT размер платы и положение точек крепления было стандартизировано как «форм-фактор AT». От разъёма магнитофона было решено отказаться, т.к. этот способ хранения данных оказался для PC бесперспективным. На пл");
            WriteLiteral(@"ате появились часы реального времени и энергонезависимая память, куда были перенесены часть функций настройки системы.</li>
    <li>По мере набора популярности архитектурой IBM PC для взаимодействия процессора с другими компонентами компьютера начали изготавливаться специализированные микросхемы, называемые чипсетом. Это позволило снизить стоимость материнских плат и одновременно перенести на них часть функций, ранее работавших через платы расширения — контроллеры дисков, коммуникационных портов и т.д.</li>
    <li>Для повышения надёжности, облегчения апгрейда и экономии места на материнской плате микросхемы ОЗУ начали объединять в модули, которые устанавливались на плату вертикально — сначала это были SIPP — модули, которые однако оказались недостаточно надёжными и вскоре были вытеснены SIMM, а затем — DIMM.</li>
    <li>По мере роста производительности процессоров росло энергопотребление и соответственно тепловыделение. Поздние модели процессоров 80486 уже требовали активного охлаждения, которое должно к");
            WriteLiteral(@"репиться к материнской плате. С целью снижения потребления энергии логические уровни, а следовательно и напряжение питания процессора, были снижены сначала до 3,3В, а потом ещё ниже — вплоть до напряжений около вольта. Для обеспечения столь низкого напряжения требуется располагать вторичный источник питания (так называемый VRM, англ. Voltage regulator module — модуль регулятора напряжений) в непосредственной близости от процессора на материнской плате.</li>
    <li>С 1995 года стандарт ISA начал вытесняться более совершенной шиной PCI. Однако, вскоре пропускной способности этой шины уже не хватало для работы высокопроизводительных видеокарт, и специально для этого в 1996 году был разработан порт AGP, который устанавливался на материнские платы одновременно с разъёмами PCI и иногда даже ISA.</li>
    <li>К середине 1990-х стандарт материнской платы AT устарел, и ему на смену должен был прийти разработанный в 1995 году новый стандарт ATX. Однако из-за того, что он был несовместим с AT по корпусу и блоку питан");
            WriteLiteral(@"ия, платы типа AT продолжали выпускаться до конца 1990-х. Новый стандарт включал выводы управления блоком питания на питающей колодке. Также на корпусе должной быть прямоугольное окно для дополнительных разъёмов, которая закрывается заглушкой, поставляемой в комплекте с материнской платой — количество и расположение разъёмов в этой зоне не регламентируется ограничено только её геометрическими размерами.</li>
    <li>В 1995 году был разработан стандарт USB, однако на материнские платы он стал встраиваться только в конце 1990-х — отчасти благодаря фирме Apple, которая в то время продавала хоть и несовместимые с x86 компьютеры, но поспособствовала разработке периферийных устройств под новый порт. В результате, стандарты ATX и USB получили широкое распространение практически одновременно в начале 2000-х: практически все материнские платы стандарта ATX поддерживали USB, в то время как платы стандарта AT — как правило нет.</li>
    <li>разъёмы процессора вплоть до Socket 7 были универсальными — позволяли устанавл");
            WriteLiteral(@"ивать в них процессоры одного поколения как от Intel, так и от AMD и Cyrix. В дальнейшем Intel и AMD стали изготавливать процессоры, несовместимые друг с другом механически и электрически.</li>
    <li>Процессор Pentium II и некоторые другие распаивались на отдельной плате вместе с кэшем и устанавливались в специальный разъём вертикально, как карты расширения, однако в дальнейшем такая компоновка распространения не получила и встречается в основном на промышленных и встроенных компьютерах.</li>
    <li>По мере роста производительности процессоров и видеокарт, их энергопотребление также росло, из-за чего на материнских платах начали появляться дополнительные разъёмы для питания процессора. Для повышения стабильности и снижения пульсаций преобразователи напряжения для питания процессора и других компонент стали выполнять многофазными.</li>
    <li>С середины 2000-х годов разъём ATA начинает вытесняться разъёмом SATA (некоторое время существуя параллельно). Разъём SATA значительно компактнее и на материнской ");
            WriteLiteral(@"плате их размещают до десятка, иногда и больше. Только вместе с разъёмом IDE уходят и разъёмы для флоппи-дисков, которые продолжали использоваться, несмотря на то, что их объёма было недостаточно уже для начала 90-х.</li>
    <li>Также с середины 2000-х начали появляться материнские платы на шине PCI Express, призванной заменить как PCI, так и AGP. И если AGP была вытеснена довольно быстро, то для PCI было изготовлено достаточно большое количество устройств, поэтому разъёмы PCI (а иногда даже ISA) продолжают иногда устанавливаться на материнские платы спустя больше десятка лет после появления PCI Express.</li>
    <li>Также с целью снижения шума при малых нагрузках и увеличения эффективности при больших, материнские платы стали оснащаться термодатчиками и цепями управления вентиляторами. Также термодатчики стали встраивать непосредственно в процессоры. Особенно важно это было энтузиастам оверклокинга.</li>
    <li>Если ранее обновление BIOS было возможно только с использованием программатора, то с середины");
            WriteLiteral(@" 2000-х появилась возможность обновления напрямую из операционной системы, что давало больше возможностей для оверклокинга, а также позволяло исправлять ошибки в BIOS.</li>
    <li>В 2013 году был представлен новый формат карт расширения — M.2. Такие карты имеют небольшой размер и устанавливаются на материнскую плату горизонтально. В основном карты формата M.2 используется для высокоскоростных SSD-накопителей и адаптеров Wi-Fi-сетей. Главное преимущество карт M.2 для SSD-накопителей — возможность использования протокола NVMe вместо AHCI, что позволяет значительно увеличить как скорость последовательного, так и случайного чтения/записи за счёт распараллеливания. Кроме того, SSD-карты формата M.2 устанавливаются на плату, не требуя дополнительных кабелей и креплений, что может очень удобно в малогабаритных сборках.</li>
    <li>В конце 2010-х в моду входят ПК с прозрачной стенкой корпуса для демонстрации его содержимого. Производители материнских плат стали наносить на платы шелкографию, устанавливать радиато");
            WriteLiteral(@"ры вычурной формы, предназначенные не только для рассеивания тепла, но и часто чисто в декоративных целях. Также материнские платы для энтузиастов могут оснащаться декоративной подсветкой.</li>
    <li>Также в 2010-х годах стали набирать популярность миниатюрные материнские платы стандартов microATX и mini-ITX для сборки высокопроизводительных систем в компактном корпусе.</li>
</ul>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
